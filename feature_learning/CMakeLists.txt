cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)
#rosbuild_find_ros_package(actionlib_msgs)
#include(${actionlib_msgs_PACKAGE_PATH}/cmake/actionbuild.cmake)
#genaction()

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
set(GRAPH_DIR ${PROJECT_SOURCE_DIR}/../graph_module)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
rosbuild_gensrv()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}")

set(TBB_INSTALL_DIR "/usr")
find_package(TBB QUIET)
if(TBB_FOUND)
  message("Found TBB.")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_TBB")
  set(LIBS ${LIBS} ${TBB_LIBRARIES})
endif(TBB_FOUND)

FIND_PACKAGE( OpenMP QUIET)
if(OPENMP_FOUND)
  message("Found OPENMP.")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

find_package(Eigen REQUIRED)
include_directories(${Eigen_INCLUDE_DIRS} ${GRAPH_DIR}/include)
link_directories(${GRAPH_DIR}/lib)
#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
rosbuild_add_library(feature_base src/feature_base_class.cpp)
target_link_libraries(feature_base learn_appearance)
#rosbuild_add_boost_directories()
rosbuild_add_executable(extract_features src/extract_features.cpp)
target_link_libraries(extract_features feature_base)
rosbuild_add_executable(execute_action src/execute_action.cpp)
target_link_libraries(execute_action feature_base arm_motion_primitives)
rosbuild_add_executable(action_client src/action_client.cpp)
target_link_libraries(action_client learn_appearance graph_module)
rosbuild_add_executable(test_texton src/test_texton.cpp)
target_link_libraries(test_texton learn_appearance)
rosbuild_add_executable(test_holes src/test_hole_creation.cpp)
rosbuild_add_executable(test_shot src/test_feature_extraction.cpp)
rosbuild_add_executable(adjacency_recorder src/adjacency_recorder.cpp)
target_link_libraries(adjacency_recorder learn_appearance graph_module)
rosbuild_add_executable(pr2_learner src/feature_learner_pr2.cpp)
target_link_libraries(pr2_learner learn_appearance graph_module)



